c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,iside,eg

      H    = uparam(1)     !channel height
      um   = uparam(2)     !mean velocity
      qpp  = 1             !heat flux
      Tin  = uparam(4)     !mean inlet temperature
      con  = cpfld(2,1)    !thermal conductivity
      term = qpp*H/(2*con)

      ux   = 3./2.*(1-16*y**2)
      uy   = 0.0
      uz   = 0.0
      temp = (1/(4*cpfld(2,1)))*(12.*y**2-32.*y**4-39./280.)
      flux = 1

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,ieg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 1
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

      implicit none

      include 'SIZE'
      include 'TOTAL'

      real xmax,xmin,ymax,ymin,zmax,zmin
      real ptA(3),ptB(3)

      if(istep.eq.nsteps) then
        call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
        ptA(1) = xmin + 0.5*(xmax-xmin)
        ptA(2) = ymax
        ptA(3) = 0.5*(zmin+zmax)
        ptB(1) = ptA(1)
        ptB(2) = ymin
        ptB(3) = ptA(3)
        call lineplot(ptA,ptB,250)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      
      Dh = 0.02 !m

      n = lx1*ly1*lz1*nelv

      call cmult(xm1,1/Dh,n)
      call cmult(ym1,1/Dh,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine lineplot(pt1,pt2,lpts)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real pt1(ldim),pt2(ldim)
      integer npts,lpts,iplot,ls

      character*141 fname
      character*10 ftail
      character*14 afmt
      character*10 rfmt
      integer intp_h,i,j,nt,nfld
      save intp_h
      logical ifset,ifdo
      real dx,pts(lhis,3)
      real fwrk(lx1*ly1*lz1*lelt,ldim+1+ldimt)
      real fpts(lhis*(ldim+1+ldimt))
      real uout(lhis),vout(lhis),wout(lhis)
      real prout(lhis),tout(lhis,ldimt)
      character*4 outname(ldim+1+ldimt)

      real rwrk(lhis,ldim+1)
      integer iwrk(lhis,3)
      save rwrk,iwrk

      save ifdo,ifset
      data ifdo /.true./
      data ifset /.true./

      save iplot
      data iplot /1/

      if(.not.ifdo) return

      nt=lx1*ly1*lz1*nelt

      npts=max(lpts,2)
      if(npts.gt.lhis) then
        if(nio.eq.0) write(*,*)
     &       "Error in lineplot, recompile with lhis in SIZE >= ",npts
        ifdo=.false.
        return
      endif
     
      call rzero(pts,npts*ndim)
      do j=1,ndim 
        pts(1,j)=pt1(j)
        dx=(pt2(j)-pt1(j))/(real(npts-1))
        do i=2,npts
          pts(i,j)=pts(i-1,j)+dx
        enddo
      enddo

      if(ifset)then
        ifset=.false.
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      nfld=0
      if(ifvo) then
        write(outname(1),'(a4)')"VELX"
        write(outname(2),'(a4)')"VELY"
        call copy(fwrk(1,1),vx,nt)
        call copy(fwrk(1,2),vy,nt)
        nfld=2
      endif
      if(if3d.and.ifvo)then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"VELZ"
        call copy(fwrk(1,nfld),vz,nt)
      endif
      if(ifpo) then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"PRES"
        call copy(fwrk(1,nfld),pr,nt)
      endif
      if(ifheat) then
        if(ifto) then
          nfld=nfld+1
          write(outname(nfld),'(a4)')"TEMP"
          call copy(fwrk(1,nfld),t,nt)
        endif
        do i=1,ldimt-1
          if(ifpsco(i)) then
            nfld=nfld+1
            write(outname(nfld),'(a2,i2)')"PS",i
            call copy(fwrk(1,nfld),t(1,1,1,1,i+1),nt)
          endif
        enddo
      endif

      if(nfld.gt.0) then

        if(nid.ne.0) npts=0

        call blank(fname,141)
        call blank(ftail,9)
        if(iplot.lt.10) then
          write(ftail,'(a,i1,a)') ".0000",iplot,".dat"
        elseif(iplot.lt.100) then
          write(ftail,'(a,i2,a)') ".000",iplot,".dat"
        elseif(iplot.lt.1000) then
          write(ftail,'(a,i3,a)') ".00",iplot,".dat"
        elseif(iplot.lt.10000) then
          write(ftail,'(a,i4,a)') ".0",iplot,".dat"
        else
          write(ftail,'(a,i5,a)') ".",iplot,".dat"
        endif
        fname=trim(session)//ftail

        if(nio.eq.0) then
          write(*,*)'   Writing line plot data to file ',fname
          if(if3d)then
            write(*,'(7x,3es15.6)')pt1(1),pt1(2),pt1(ldim)
            write(*,'(7x,3es15.6)')pt2(1),pt2(2),pt2(ldim)
          else
            write(*,'(7x,2es15.6)')pt1(1),pt1(2)
            write(*,'(7x,2es15.6)')pt2(1),pt2(2)
          endif
          write(*,*)
        endif
   
        call interp_nfld(fpts,fwrk,nfld,pts(1,1),pts(1,2),pts(1,3),npts
     &                                    ,iwrk,rwrk,lhis,.true.,intp_h)

        call blank(afmt,14)
        call blank(rfmt,10)
        if(if3d) then
          write(afmt,'(a1,i2,a11)')"(",nfld+3,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+3,"es16.8)"
        else
          write(afmt,'(a1,i2,a11)')"(",nfld+2,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+2,"es16.8)"
        endif
  
        if(nio.eq.0) then
          open(unit=10,file=fname,status='unknown',form='formatted')
          if(if3d) then
            write(10,afmt)"X","Y","Z",(outname(i),i=1,nfld),time
          else
            write(10,afmt)"X","Y",(outname(i),i=1,nfld),time
          endif
          do i=1,npts
            if(if3d) then
              write(10,rfmt)pts(i,1),pts(i,2),pts(i,3)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            else
              write(10,rfmt)pts(i,1),pts(i,2)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            endif
          enddo
        endif
  
        close(10)
  
        iplot=iplot+1
      endif

      return
      end
c-----------------------------------------------------------------------
